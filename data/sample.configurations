=0␟Namespace 1␟key 1␟“string value”
<9␟Namespace 1␟key 2␟“string value”

# the next line: commented out b/c it`s redundant WRT the line right after it
# >0␟Namespace 1␟key 1␟“string value”⍝  if you really insist on writing a same-line comment, then it`s better to start it using the APL lamp
  >0␟Namespace 1␟key 1␟“string value”
  >1␟Namespace 1␟key 1␟“string value” # when a matches-both-rules query is given to the engine: this triggers the multiple-matches code, i.e. run-time checking, but has a redundant value, all of which means this line should cause a warning when the engine is not being very strict, and a failure if the strictness level is "high enough" [string test case]

# blank lines are allowed, and comment lines are allowed, with a first non-{ASCII space} character of ‘#’
   # leading and trailing ASCII spaces should be ignored

≤9␟Namespace 1␟key 3␟42
≥9␟Namespace 1␟key 4␟-42

# maturity levels and namespaces can be specified as ‘*’ [without the quotes], meaning “all”;
#   for a maturity level, this is equivalent to specifying “≥0”

# *␟*␟bad key 1, not in schema␟“string value”
# *␟*␟bad key 2, not in schema␟“”
# *␟*␟bad key 3, not in schema␟ 0
# *␟*␟bad key 4, not in schema␟-1
# *␟*␟bad key 5, not in schema␟ 1
# *␟*␟bad key 6, not in schema␟ <> ⍝ invalid URL



# *␟*␟test bad URL ␟<>
# *␟*␟test bad URL ␟<foo>
# *␟*␟test bad URL ␟http://www.fsf.org/ ⍝ bad b/c it`s missing the surrounding < and > characters
  *␟*␟test good URL␟<http://www.fsf.org/>
# *␟*␟test good URL␟<http://www.fsf.org/> ⍝  OK in non-strict mode b/c it`s redundant
#  *␟*␟test good URL␟<http://www.gnu.org/> ⍝ bad b/c it`s conflicting

# *␟*␟test bad  nonempty_string␟“”
  *␟*␟test good nonempty_string␟“string value”

# *␟*␟test bad  nonnegative_integer␟-1
  *␟*␟test good nonnegative_integer␟ 0

# *␟*␟test bad  positive_integer␟0
  *␟*␟test good positive_integer␟1

  *␟foo␟test good positive_integer␟1 ⍝ testing conflict detection: this is actually OK when the strictness level is low enough, as it is redundant [same value as the respective line with an asterisked namespace]

#  *␟foo␟test good positive_integer␟2 ⍝ testing conflict detection: this is _bad_ [conflicts with value of 1 in "*␟*␟test good positive_integer␟1"]
=9␟foo␟test good positive_integer␟2 # when a matches-both-rules query is given to the engine: this triggers the multiple-matches code, i.e. run-time checking, and conflicts with "*␟*␟test good positive_integer␟1", above, all of which means this line should either {[1] cause a warning, at low strictness, or [2] cause a failure, if the strictness level is "high enough"} [integer test case]


# *␟Namespace 1␟key 1␟9 ⍝ BAD: won`t type-check, b/c this value is supposed to be a _string_

# *␟Namespace 1␟*␟9 ⍝ attempting to use '*' as the key will always fail; as of this writing, it fails simply b/c there is no matching [valid] entry in the schema, so the value cannot be type-checked


# --- testing aliases for maturity levels --- #
=sandbox␟Namespace 1␟key 5␟“string value for... maturity level "sandbox"            :: Namespace 1 :: key 5”
=dev    ␟Namespace 1␟key 5␟“string value for... maturity level "dev"                :: Namespace 1 :: key 5”
=test   ␟Namespace 1␟key 5␟“string value for... maturity level "test"               :: Namespace 1 :: key 5”
=UAT    ␟Namespace 1␟key 5␟“string value for... maturity level "UAT"                :: Namespace 1 :: key 5”
≥prod   ␟Namespace 1␟key 5␟“string value for... maturity level "prod" _or_ _higher_ :: Namespace 1 :: key 5”


  =1␟*␟test key name for configuration namespace-asterisk conflict checker␟1
# =1␟*␟test key name for configuration namespace-asterisk conflict checker␟1 ⍝ redundant: OK only in non-strict mode
# =1␟*␟test key name for configuration namespace-asterisk conflict checker␟2 ⍝ bad: conflicting
  =3␟*␟test key name for configuration namespace-asterisk conflict checker␟2

  =2␟*␟test key name for configuration namespace-asterisk conflict checker␟3
# =2␟*␟test key name for configuration namespace-asterisk conflict checker␟3 ⍝ redundant: OK only in non-strict mode
# =2␟*␟test key name for configuration namespace-asterisk conflict checker␟4 ⍝ bad: conflicting

### this block: _intentionally_-overlapping maturity levels, and intentionally [completely, i.e. including type] redundant-therefor-OK
  >0␟*␟test key name for a positive integer with redundancy␟1
  <9␟*␟test key name for a positive integer with redundancy␟1
# <0␟*␟test key name for a positive integer with redundancy␟1 ⍝ testing for the rejection [or lack thereof] of nonsensical MLC "<0" in strict mode

### this block: _intentionally_-overlapping maturity levels, and intentionally [completely, i.e. including type] redundant-therefor-OK
>0␟*␟test key name for a positive integer with at least one conflict␟2
<9␟*␟test key name for a positive integer with at least one conflict␟3

### this block: _intentionally_-missing field values; the first one should "crash" the engine in strict mode, and they should all cause warnings [and _not_ any crashes] in non-strict mode
# =10000␟␟key 5␟“hi” ⍝ missing namespace
# =10001␟Namespace 1␟␟“hi” ⍝ missing key
# =10002␟Namespace 1␟key 5␟ ⍝ missing value
# =10003␟␟␟“hi” ⍝ missing namespace _and_ key
# =10004␟␟key 5␟ ⍝ missing namespace _and_ value
# =10005␟Namespace 1␟␟ ⍝ missing key _and_ value
⍝ =10006␟␟␟ ⍝ missing "everything"!  What a woild, what a woild!  ;-)

=1␟Namespace 1␟test key name for a port number␟    0 ⍝ good
=2␟Namespace 1␟test key name for a port number␟65535 # good
# =3␟Namespace 1␟test key name for a port number␟   -1 ⍝  bad
# =4␟Namespace 1␟test key name for a port number␟65536 ⍝  bad

### below this line: not yet supported ###
