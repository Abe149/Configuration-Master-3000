# testing...
  # ... comments.


strategy whitelisting # This means that whitelisting rules are acceptable in this file.

                      # Although -- _technically_ -- whitelisting rules are not required in this file,
                      #   in the absence of any such rules, the engine will label _all_ connections
                      #   as unauthorized.

                      # All the requirements are still processed, same is in the other strategy modes,
                      #   so if _none_ of your whitelisting rules meet the requirements of _all_
                      #   of the requirements stated in "require" statements, then, as above,
                      #   the engine will label _all_ connections as unauthorized...  as required.  ;-)


# require site-local
# require link-local
require loopback

# _NO_ regex symbols are allowed/recognized/{handled specially} in FQDN literals, so a period is handled as a _literal_ period
# whitelist FQDN literal localhost # this works

whitelist FQDN literal loca.host # this should _not_ work, since in an FQDN literal the '.' character is _not_ "magical", unlike in an FQDN _pattern_

whitelist FQDN literal this.is.a.test.of.the.emergency.broadcast.system
whitelist FQDN literal insane_test_of_literalization___().*$^+[]{}|?\___


# whitelist FQDN pattern localhost     # this works
# whitelist FQDN pattern local.*host   # this works too

# whitelist FQDN pattern ^localhost$   # this works too
# whitelist FQDN pattern .*localhost.* # this works too
# whitelist FQDN pattern .*ocalhos.* # this works too
# whitelist FQDN pattern .*local.*host.* # this works too


/*

whitelist IP pattern 127.0.0.1

# --- testing the whitelist IP pattern parser --- #
whitelist IP pattern 127.0.0.*
whitelist IP pattern 127.0.*.1
whitelist IP pattern 127.0.*.*
whitelist IP pattern 127.*.0.1
whitelist IP pattern 127.*.0.*
whitelist IP pattern 127.*.*.1
whitelist IP pattern 127.*.*.*
whitelist IP pattern   *.0.0.1
whitelist IP pattern   *.0.0.*
whitelist IP pattern   *.0.*.1
whitelist IP pattern   *.0.*.*
whitelist IP pattern   *.*.0.1
whitelist IP pattern   *.*.0.*
whitelist IP pattern   *.*.*.1
whitelist IP pattern   *.*.*.* # this would be _super_-dangerous in production if/when used without any requirements: without any requirements, it`s basically a way of saying "ALLOW FROM ALL"!

whitelist IP pattern   *.*.*.[10…100] # spaces are _not_ tolerated in IP pattern "bodies" as of this writing

*/

# spaces are _not_ tolerated in IP pattern "bodies" as of this writing

# whitelist IP pattern [126…128].[0…0].[0…1].[0…2] # this works!!!
  whitelist IP pattern [128…126].[0…0].[0…1].[0…2] # testing the automatic "repair" of reversed ranges

# testing the inequality-expression subparsers
whitelist IP pattern <9.*.*.*
whitelist IP pattern >9.*.*.*
whitelist IP pattern ≤9.*.*.*
whitelist IP pattern ≥9.*.*.*

# testing code that warns us when we have a character in a literal FQDN that probably should not be there b/c the rule will never match
whitelist FQDN literal insane_test_2_of_literalization___().*$^+[]{}|?\___
whitelist FQDN literal insane_test_3_of_literalization___≠
whitelist FQDN literal test_משוגע_①⑵⒊❹➄➏７_of_literalization # making full use of the insanity of Unicode`s suites of digits; intentionally _not_ including any samples of _other_ Unicode suites of digits, e.g. modern Arabic, b/c those may be considered instances wherein Unicode is acutally _sane_ for a change
