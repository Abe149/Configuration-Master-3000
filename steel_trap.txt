in "Configuration_Master_engine.java"
-------------------------------------

A POSSIBLE LACK OF STRICTNESS, EVEN IN STRICT-CHECKING MODE: since the code below checks for conflicts using the string representations after a _complete_ "unparse" of the relevant internal datum, not only can it not disambiguate between data with different types but the same values [e.g.: a URL with the value "http://example.com/" vs. a _string_ with the value "http://example.com/", a positive integer with the value 1 vs. a nonnegative integer with the value 1], but it _also_ cannot disambiguate between a positive integer with the value 1 and a string with the value "1" [w/o the quotes], and therefor will consider all those "could be viewed as conflicting" scenarios as "OK, just redundant"; perhaps TO DO about this: enable/implement multiple _levels_ of strictness, and if/when e.g. strictness>1 then check for these conflicts [i.e. type conflicts even when the values are either identical or "look the same" (i.e. 1 vs. "1")]



TO DOs
------
* write code to rewrite ['>' / '<']-based MLCs using '≤' & '≥'
  * when that is done and tested working, remove internal support for '<' and '>'

* write a better test script or rewrite "Q_and_D_tester.bash" so it`s not so Q&D any more

* break out the test cases into files that can be tested individually

* create a new "library class", move "stringize_safely" into it

* make strictness multi-level, with a default level of 0 [zero]
  * then make the current "strict mode" the new "strictness level 1"
    * new "strictness level 2": compare matches/results for conflicting values _including_ Java type, i.e. do _not_ consider 1 and "1" to be equivalent and therefor redundant-is-OK
    * new "strictness level 3": compare matches/results for conflicting values _including_ the _CM3000_ type [e.g. positive_integer]

* make the engine report errors more usefully, e.g. with pathname and line of the place in the "source code" where things went wrong
  * this might require changing {the handoff from server to engine} from BufferedReader references to plain pathnames [i.e. String references]
