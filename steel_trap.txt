in "Configuration_Master_engine.java"
-------------------------------------

A POSSIBLE LACK OF STRICTNESS, EVEN IN STRICT-CHECKING MODE: since the code below checks for conflicts using the string representations after a _complete_ "unparse" of the relevant internal datum, not only can it not disambiguate between data with different types but the same values [e.g.: a URL with the value "http://example.com/" vs. a _string_ with the value "http://example.com/", a positive integer with the value 1 vs. a nonnegative integer with the value 1], but it _also_ cannot disambiguate between a positive integer with the value 1 and a string with the value "1" [w/o the quotes], and therefor will consider all those "could be viewed as conflicting" scenarios as "OK, just redundant"; perhaps TO DO about this: enable/implement multiple _levels_ of strictness, and if/when e.g. strictness>1 then check for these conflicts [i.e. type conflicts even when the values are either identical or "look the same" (i.e. 1 vs. "1")]


Useful [and complicated enough to be worth preserving here] Unix commands
-------------------------------------------------------------------------

./check_non-strictly.sh 2>&1|grep INFO | grep --color synthetic -B9 -A9

ls -l / | sed -e 's/Apr/<=/' -e 's/Jun/==/' -e 's/Mar/>=/' | sort -k 5,5n -k 6,6



TO DOs
------
* find the remaining places in the code where an exception could be thrown even when strictness level is zero, make them predicated upon strictness level is > zero

* [IN PROGRESS] break out the test cases into files that can be tested individually

* make the engine in non-strict mode report ignored invalid inputs in more [all the remaining?] places where it ignores invalid inputs
  * this will probably involve replacing a bunch of "naked" "return null;" statements with e.g. "if (strict<...>) System.err.println("WARNING: <...>"<...> return null;"

* make the engine in non-strict mode report ["WARNING"/"INFO"] ignored redundant inputs
  * [at least partially done, e.g. the query-handling code in "get_configuration"; possibly still to do: the same idea but in other places in the code]

* make the engine in super-strict mode _reject_ redundant inputs
  * [at least partially done, e.g. the query-handling code in "get_configuration"; possibly still to do: the same idea but in other places in the code]

* add countdown code [for when strictness > ... 0?  1?] to the server
  * once that`s working, remove the functionally-{similar/same} code from the "run_<...>" wrapper scripts

*   maybe not, since maybe it`s useless in the real world: support MLC specifier '≠'
  * maybe not, since maybe it`s useless in the real world _and_ its effect can be provided by just using two config. rules instead of one; example: one line with "<X" and another line with ">X" but otherwise identical [possibly modulo comments]
  * this is syntactic sugar; example: "≠X" is syntactic sugar for two almost-the-same config. rules, one for "<X" and one for ">X"
  * reminder: '<' itself is now mere syntactic sugar; example: "<X" is syntactic sugar for "≤(X-1)" [where everything inside the paren.s -- and the paren.s themselves -- is replaced by an ASCII decimal integer]
  * reminder: '>' itself is now mere syntactic sugar; example: ">X" is syntactic sugar for "≥(X+1)" [where everything inside the paren.s -- and the paren.s themselves -- is replaced by an ASCII decimal integer]





DONE to-dos
-----------

* [DONE] write code to rewrite ['>' / '<']-based MLCs using '≤' & '≥' -- DONE as of 83e70dc789af5fdd27ed422fbea073d231aa36b5 [Mon Apr 6 03:49:12 2020 -0400]
  * [DONE] make strict mode throw an exception upon compiling the MLC "<0" since it`s nonsensical [allow it to pass, ignored, in non-strict mode] -- DONE as of 507fe0e60c7abc50cf154245dd3412abf9c26cf4 [Mon Apr 6 04:39:11 2020 -0400]
  * [DONE] when that is done and tested working, remove internal support for '<' and '>' -- DONE as of commit a585c58b3d09762d38a7566e2248cca00280dd6a [Mon Apr 6 05:35:07 2020 -0400]

* [DONE] create a new "library class", move "stringize_safely" into it -- DONE as of 5e33c9536ab5abaa720a0bf3cc79f734f50a9fe0 [Wed Apr 8 02:36:07 2020 -0400]

* [DONE] make the engine report errors more usefully, e.g. with pathname and line of the place in the "source code" where things went wrong -- DONE as of dc1fe372e964ff989d4f5bb3413fd097ad151f47 [at Wed Apr 8 07:54:38 2020 -0400]
  * IGNORE: this might require changing {the handoff from server to engine} from BufferedReader references to plain pathnames [i.e. String references] -- BETTER SOLUTION THOUGHT OF AND IMPLEMENTED: "debugFriendly_buffered_input.java" & "debugFriendly_buffered_FileReader.java"

* write a better test script or rewrite "Q_and_D_tester.bash" so it`s not so Q&D any more

* [DONE] make strictness multi-level, with a default level of 0 [zero] -- DONE as of 016817d9e9612f12e55e367813326c0523deeae9 [Thu Apr 9 17:08:45 2020 -0400]
  * [DONE] then make the current "strict mode" the new "strictness level 1" -- DONE as of 016817d9e9612f12e55e367813326c0523deeae9 [Thu Apr 9 17:08:45 2020 -0400]
    * [basically DONE]:
      * old "specification" of this To Do: new "strictness level 2": compare matches/results for conflicting values _including_ Java type, i.e. do _not_ consider 1 and "1" to be equivalent and therefor redundant-is-OK
      * what I _actually_ implemented: compare matches/results for conflicting values _including_ Java type, i.e. do _not_ consider 1 and "1" to be equivalent and therefor redundant-is-OK, in _all_ strictness levels... new "strictness level 2": requires multiple matches to be non-conflicting [conflicts are "OK" at levels 1 and below, i.e. 1 and 0, and the runtime will just return the first match after reporting the ambiguity to std. error]
    * [NOT TO DO after all] new "strictness level 3": compare matches/results for conflicting values _including_ the _CM3000_ type [e.g. positive_integer]

